version: "3.7"  # nurodome suderinamo docker-compose versiją
services:       # services yra konteinerių sąrašas
  dev:          # konfigūruojame konteinerį pavadinimu web
    # build komanda nudorome, kad iš kuriame kataloge (šiuo atveju iš esančio katalogo, .) esančio Dockerfile statyti konteinerį
    build: .
    # paveiksliuko (docker image) pavadinimas
    image: wedish:dev
    # konteinerio pavadinimas
    container_name: wedish.dev
    # parametras tty nurodo, ar konteineris gali naudotis linux subsistemos serijinės sąsajos TeleTYpewriter savybėmis, kurių iš esmės reikia komandinei eilutei funkcionuoti. Tuo pačiu atidarom ir stdin - komandinės eilutės įvedimo funkciją, kurią gali tekti prireikti naudoti pvz. su python input() funkcija.
    tty: true
    stdin_open: true
    # restart komanda nurodo sąlygas, kada perkrauti konteinerį jam išsijungus. Produkcinėje aplinkoje tai turėtų būti always. 
    restart: always
    # kokias komandas vykdyti paleidžiant konteinerį. Šios eilutės nereikia, jeigu Dockerfile yra COMMAND.
    # command: >
    #   bash -c "./projektas/manage.py migrate &&
    #            ./projektas/manage.py runserver 0.0.0.0:8000"
    # # tinklo konfigūracija
    ports:
      - 8000:8000
    # volumes - disko sąsaja, kur konteineris sinchronizuos savo failus su realiais diske esančiais failais. Šių failų nereikės kopijuoti su cp. Taip pat panašiai sinchronizuosime ir `static` bei `media` katalogus su nginx konteineriu.
    volumes:
      - ./wedish:/app
    # priklausomybės - kurie konteineriai turėtu būti paleisti, paleidžiant šį konteinerį.
    depends_on:
      - db
    # pervadiname db konteinerio host lokaliame projekto tinkle. Nepamirškite duomenų bazės konfigūracijos faile nurodyti `host=postgres` vietoj `host=localhost`
    links:
      - db:db-wedish
    # aplinkos savybės (environment variables)
    environment:
      PYTHONIOENCODING: UTF-8
      # jeigu naudojate kitą settings failą, galite nuorodą į jį pakeisti čia.
      # DJANGO_SETTINGS_MODULE: projektas.settings
    command: >
      bash -c "python wait_for_postgres.py &&
               python manage.py makemigrations &&
               python manage.py migrate &&
               python manage.py collectstatic --noinput &&
               gunicorn wedish.wsgi --bind 0.0.0.0:8000"
  db:           # Duomenų bazės konteineris
    # naudosime standartinį postgres image
    image: postgres
    # konteinerio pavadinimas
    container_name: wedish.db
    restart: always
    ports:
      - 5432:5432
    volumes:
      - ./dbdata:/var/lib/postgresql/data
    # nurodžius environment'e duomenų bazės parametrus, nauajs postgres konteineris šiais kredencialais sukurs tuščią duomenų bazę. Produkcinėje aplinkoje siūlytume nenurodyti, arba pakeisti čia nustatytus.
    environment:
      POSTGRES_DB: wedish
      POSTGRES_USER: wedish
      POSTGRES_PASSWORD: nesakysiu
      POSTGRES_PORT: 5432
  nginx:           # Nginx konteineris
    # surenkame nginx konteinerį su mūsų projekto .conf
    build: ./nginx/
    # savo surinkto nginx image paveiksliuko pavadinimas ir tagas
    image: nginx:wedish
    # konteinerio pavadinimas
    container_name: wedish.nginx
    # jeigu konteineris pakibtų, jį visada perkrausime
    restart: always
    # kokius portus atidaryti - jeigu reikia, įtraukite ir SSL
    ports:
      - 80:80
      # - 443:443
    # nurodome tinklo sąsają su pagrindiniu projekto konteineriu `dev`.
    links:
      - dev:dev
    # sinchronizuojame failus tarp konteinerio ir projekto `static` ir `media` katalogų. Šiuo atveju, netgi padarius `python manage.py collectstatic` iš projekto `dev` konteinerio, `nginx` konteineryje atitinkami failai taip pat atsinaujins.
    volumes:
      - ./wedish/media:/app/media
      - ./wedish/static:/app/static
